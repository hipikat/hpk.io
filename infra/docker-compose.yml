####
# Docker compose configuration for a development environment
#
# Control my lifecycle:
#   $ docker-compose [-d] [service] (build|up|down)
#
# Create development or staging services:
#   $ docker-compose up [--build] app-(dev|stage) [app-dev-(bundler|tester)]
#
# Shell into me:
#   $ docker-compose exec [-u [username]] app-(dev|stage) (bash|zsh)
#
# Run migrations against a service:
#   $ docker exec lw-app-(dev|stage) pipenv run django migrate
#
# Alternatively, use the shortcuts...
# TODO: replace with picata calls
#   $ npm run docker:build
#   $ npm run docker:dev:up
#   $ npm run docker:dev:shell
#   $ npm run migrate:docker:dev
#   $ npm run docker:down

version: "3.9"

x-service: &service
  volumes:
    - ./src:/app/src
    - ./var:/app/var
    - ./media:/app/media
  env_file: etc/env/docker-local-dev
  tty: True
  stdin_open: True

services:
  ########################
  # Development services
  ########################

  # Development server (has all the debug flags on)
  # visit me at http://localhost:8061/
  app-dev:
    <<: *service
    build:
      target: lw-app-dev
    container_name: lw-app-dev
    environment:
      - NO_RELOAD
    image: lw-app:dev
    ports:
      - "5678:5678"
      - "8061:8061"
      - "8062:8062"
    depends_on:
      - db-dev

  # Development database container
  db-dev:
    image: postgres:13.2
    container_name: lw-db-dev
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: picata
    ports:
      - 5459:5432
    volumes:
      - picata_pgdata_dev:/var/lib/postgresql/data/

  # Bundler (runs a Webpack watcher)
  bundler:
    <<: *service
    build:
      context: .
      target: lw-app-bundler
    image: lw-app:bundler
    container_name: lw-bundler
    depends_on:
      - app-dev
    command: ["npm", "run", "watch:webpack"]

  ########################
  # Staging services
  ########################

  # Nginx web server for staging
  # visit me at http://localhost:8063/
  server-stage:
    build:
      context: .
      dockerfile: Dockerfile
      target: lw-nginx
    image: lw-nginx:stage
    container_name: lw-server-stage
    volumes:
      - picata_static_stage:/app/static
    ports:
      - "8063:80"
    depends_on:
      - app-stage

  # Staging server (is as prod-like as possible)
  # visit me at http://localhost:8062/
  app-stage:
    build:
      context: .
      dockerfile: Dockerfile
      target: lw-app-stage
    image: lw-app:stage
    container_name: lw-app-stage
    volumes:
      - ./src:/app/src
      - ./var:/app/var
      - picata_static_stage:/app/static
    ports:
      - "8062:8000"
    depends_on:
      - db-stage

  # Staging database container
  db-stage:
    image: postgres:13.2
    container_name: lw-db-stage
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: picata
    ports:
      - 5459:5432
    volumes:
      - picata_pgdata_stage:/var/lib/postgresql/data/

  ############
  # Testing services
  app-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: lw-test-fast
    image: lw-app:test-fast
    container_name: lw-app-test
    ports:
      - "8065:80"
    volumes:
      - ./src/:/app/src

volumes:
  # Development volumes
  picata_pgdata_dev:

  # Staging volumes
  picata_pgdata_stage:
  picata_static_stage:
