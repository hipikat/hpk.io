####
# Docker compose configuration for a development environment
#
# Control my lifecycle:
#   $ docker-compose [-d] [service] (build|up|down)
#
# Create development or staging services:
#   $ docker-compose up [--build] app-(dev|stage) [app-dev-(bundler|tester)]
#
# Shell into me:
#   $ docker-compose exec [-u [username]] app-(dev|stage) (bash|zsh)
#
# Run migrations against a service:
#   $ docker exec lw-app-(dev|stage) pipenv run django migrate

x-appdev: &appdev
  build:
    context: .
    target: hpk-app-dev
  tty: True
  stdin_open: True
  volumes:
    - ./config:/app/config
    - ./src:/app/src
    - ./tests:/app/tests
    - ./pyproject.toml:/app/pyproject.toml
    - ./pytest.ini:/app/pytest.ini
    - ./uv.lock:/app/uv.lock
    - ./Justfile:/app/Justfile
    - ./README.md:/app/README.md
    - hpk_static:/app/static
    - hpk_media:/app/media
    - hpk_caches:/mnt/hpk-caches
  environment:
    DB_HOST: db-server
    DB_PASSWORD: insecure

services:
  # Development database container exposed on port 5454
  db-server:
    image: postgres:17-alpine3.20
    container_name: hpk-db-server
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: insecure
    ports:
      - 5454:5432
    volumes:
      - db_pgdata:/var/lib/postgresql/data/

  # Dev server running runserver_plus on port 8000 with DEBUG=True
  app-runserver:
    <<: *appdev
    container_name: hpk-app-runserver
    ports:
      - "8000:8000"
    entrypoint:
      [
        "wait-for-it",
        "db-server:5432",
        "--timeout=20",
        "--",
        "just",
        "dj",
        "runserver_plus",
        "0.0.0.0:8000",
      ]

  # Server running gunicorn on port 8040 with DEBUG=False
  app-gunicorn:
    <<: *appdev
    container_name: hpk-app-gunicorn
    ports:
      - "8040:8040"
    entrypoint:
      [
        "wait-for-it",
        "db-server:5432",
        "--timeout=20",
        "--",
        "uv",
        "run",
        "gunicorn",
        "--reload",
        "--log-level=debug",
        "--access-logfile",
        "-",
        "--error-logfile",
        "-",
        "--capture-output",
        "--workers",
        "2",
        "--bind",
        "0.0.0.0:8040",
        "hpk.wsgi:application",
      ]

  # Nginx web server proxying app-gunicorn on port 8050
  web-server:
    image: nginx:1.27-alpine3.20
    container_name: hpk-web-server
    volumes:
      - ./config/nginx-site-docker.conf:/etc/nginx/conf.d/default.conf:ro
      - hpk_static:/app/static
      - hpk_media:/app/media
    ports:
      - "8050:8050"
    depends_on:
      - app-gunicorn

  # Migration runner for the database server
  db-migrator:
    <<: *appdev
    container_name: hpk-migrator

  # Webpack bundler, watching for changed files
  bundler:
    tty: True
    stdin_open: True
    build:
      target: hpk-bundler
    volumes:
      - ./src:/app/src
      - hpk_build:/app/build
      - hpk_caches:/mnt/hpk-caches
    container_name: hpk-bundler
    depends_on:
      - app-runserver
      - app-gunicorn
    command: ["npm", "run", "watch:webpack"]

volumes:
  hpk_caches:
  hpk_build:
  hpk_static:
  hpk_media:
  db_pgdata:
