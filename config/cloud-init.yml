#cloud-config

packages:
  # Services
  - certbot
  - nginx
  - postgresql
  - python3-certbot-nginx
  # Utilities
  - htop
  - multitail
  - neovim
  - snapd
  - tree
  - zsh

write_files:
  - path: /etc/environment
    content: |
      FQDN="${fqdn}"
      DB_NAME="${db_name}"
      DB_USER="${db_user}"
      DB_PASSWORD="${db_password}"
      INTERNAL_IPS="${internal_ips}"
      ADMIN_EMAIL="${admin_email}"
      GMAIL_PASSWORD="${gmail_password}"
      SECRET_KEY="${secret_key}"
    append: true

users:
  - name: wagtail
    uid: 1500
  - name: ada
    ssh-authorized-keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKUDDwkurpZbeUCdQRGDO1uxQt7kedRbm/f67mARtPeC hipikat@lemon-2024-08-29
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    groups: sudo, wagtail, systemd-journal
    shell: /bin/zsh

runcmd:
  # Enable systemd journal services
  - echo ">>> Enabling systemd journal services"
  - mkdir -p /var/log/journal
  - systemctl restart systemd-journald

  # Set the server's timezone
  - sudo timedatectl set-timezone ${timezone}
  - echo "${timezone}" | sudo tee /etc/timezone
  - sudo dpkg-reconfigure --frontend noninteractive tzdata

  # Install ada's dotfiles
  - echo ">>> Installing ada's dotfiles"
  - sudo -u ada git clone https://github.com/hipikat/dotfiles.git /home/ada/.dotfiles
  - sudo -u ada sh -c 'cd /home/ada/.dotfiles && sh install_dotfiles.sh'
  - sudo chmod 755 /home/ada

  # Install Just
  - echo ">>> Installing Just"
  - >-
    curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh |
    bash -s -- --to /usr/local/bin

  # Install UV
  - echo ">>> Installing UV"
  - >-
    curl -LsSf https://astral.sh/uv/install.sh |
    UV_UNMANAGED_INSTALL="/usr/local/bin" HOME="/root" sh

  # Install Node
  - echo ">>> Installing Node.js"
  - >-
    . /etc/environment &&
    curl -sSfL https://nodejs.org/dist/v${node_version}/node-v${node_version}-linux-x64.tar.xz |
    tar -xJ -C /usr/local/
  - mv /usr/local/node-v${node_version}-linux-x64 /usr/local/node-v${node_version}
  - ln -s /usr/local/node-v${node_version}/bin/node /usr/local/bin/node
  - ln -s /usr/local/node-v${node_version}/bin/npm /usr/local/bin/npm

  # Clone the project into /app and create initially-empty directories
  - echo ">>> Cloning project repository and creating directories"
  - git clone https://github.com/hipikat/hpk.io.git /app
  - mkdir -p /app/logs /app/media

  # Ensure /app/** is owned by wagtail, is group-writable, and new files inherit the group
  - echo ">>> Ensuring /app ownership and permissions"
  - chown -R wagtail:wagtail /app
  - chmod -R g+rw /app
  - find /app -type d -exec chmod g+s {} \;

  # Install project dependencies
  - echo ">>> Installing project dependencies"
  - sudo -u wagtail uv sync --directory /app -v --no-progress
  - cd /app && sudo -u wagtail npm install --no-audit --no-fund --no-progress --loglevel=info

  # Create the database and run migrations
  - echo ">>> Initializing the database and running migrations"
  - just -E /etc/environment -f /app/Justfile db-init ${db_password}
  - sudo -u wagtail just -E /etc/environment -f /app/Justfile dj migrate

  # Create the Django superuser
  - echo ">>> Creating the Django superuser"
  - sudo -u wagtail just -E /etc/environment -f /app/Justfile dj-createsuperuser ${admin_django_user} ${admin_email} ${admin_password}

  # Build artifacts and collect all static files
  - echo ">>> Building artifacts and collecting static files"
  - cd /app && sudo -u wagtail npm run build

  # Configure and start Gunicorn
  - echo ">>> Configuring and starting Gunicorn"
  - ln -s /app/config/${gunicorn_config} /etc/systemd/system/gunicorn-hpk.service
  - systemctl start gunicorn-hpk

  # Configure certbot to obtain SSL certificates from LetsEncrypt & set up for automatic renewal
  - echo ">>> Getting SSL certificates from LetsEncrypt & setting up automatic renewal"
  - systemctl stop nginx
  - groupadd -f letsencrypt && usermod -aG letsencrypt www-data
  - snap install core && snap refresh core
  - snap install --classic certbot
  - certbot certonly ${certbot_args} --standalone -d ${fqdn} --non-interactive --agree-tos --email ${admin_email}
  - mkdir -p /etc/nginx/ssl
  - ln -s /etc/letsencrypt/live/${fqdn}/fullchain.pem /etc/nginx/ssl/hpk-fullchain.pem
  - ln -s /etc/letsencrypt/live/${fqdn}/privkey.pem /etc/nginx/ssl/hpk-privkey.pem
  - chown -R letsencrypt:www-data /etc/nginx/ssl

  # Configure and start Nginx
  - echo ">>> Configuring and starting Nginx"
  - >-
    sed -i '/^http {/a \
    \n\tlog_format main '\''$remote_addr - $remote_user [$time_local] "$request" '\''
    \n\t                '\''$status $body_bytes_sent "$http_referer" '\''
    \n\t                '\''"$http_user_agent" "$http_x_forwarded_for"'\'';\n
    \n\tlog_format warn '\''$remote_addr [$time_local] $status "$request"'\'';\n'
    /etc/nginx/nginx.conf
  - echo '\nenv FQDN;' | tee -a /etc/nginx/nginx.conf
  - rm -f /etc/nginx/sites-enabled/default
  - ln -s /app/config/nginx-site-dev.conf /etc/nginx/sites-available/hpk
  - ln -s /etc/nginx/sites-available/hpk /etc/nginx/sites-enabled/hpk
  - systemctl start nginx

final_message: "The system has been initialised with cloud-init!"
